The fact that we do not store sensitive information is well known,
while dealing with containers, Kubernetes, cloud, and secrets
we must avoid or should not commit sensitive information like
Access keys, passwords, and SSH Private keys in the repository, 
even if the repository is private.
There are various OpenSource tools that can be used to Secure secretes.
Few of them are :
Git-crypt
BlackBox
SOPS
Transcrypt
Also, there are larger Options like :
HashiCorp Vault
AWS Secrets Manager
Square Keywhiz
Azure Key Vault
In this post we’ll talk about the git-crypt tool and how it helps encrypt sensitive information, but before diving into Git-crypt lets see what Encryption types do these tools use.
These tools for managing secrets use GNU Privacy Guard (GPG), symmetric key encryption, and/or cloud services.
Short description
GPG: A GPG keypair is generated by users in GPG-based tools. The public key is used to encrypt and is shared with other users, while the private key is used to decrypt and is known by only a single user.
Symmetric key encryption: Symmetric key tools are based on a password and work when the correct password is provided.
Cloud key services: Amazon’s Key Management Service (KMS), Google Cloud KMS, and tools based on Azure Key Vault allows integration with cloud provider services.

Encryption types used by various tools
Git-crypt and SOPS, as you can see,use more than one basis for encryption.This means that Git-crypt can achieve encryption using GPG OR a symmetric key, and SOPS can use one of the cloud services or GPG .
The basic workflow for a GPG-based tool is:
1: Initialize the repository with the encryption tool
2: Create GPG keys for users that are allowed to manage secret files
3: Add the corresponding public keys to the tool
4: Designate the files that should be treated as “secret”
5: Encrypt the files using the tool
6: Repeat steps 2, 3, and 5 for each new user that is granted permission
7: To revoke a user, remove the user and repeat step 5
I hope this gave you a brief idea about what tools you can manage your secrets and how they work.
Coming back to what git-crypt is?
Git-crypt: A tool that enables transparent encryption and decryption of files in a git repository. When committed, files that you choose to protect are encrypted and decrypted when checked out.
Git-crypt allows you to share a repository that contains a mix of public and private content.
Git-crypt degrades gracefully, so developers can still clone and commit to a repository with encrypted files without the secret key. This lets you store your secret material (like keys or passwords) in the same repository as your code, without requiring you to lock down your entire repository.

Let’s get hands-on Using git-crypt :
Installing git-crypt on centos 7
1: Download git crypt :
[cloudbunny@monitoring ~]$ sudo wget https://cbs.centos.org/kojifiles/packages/git-crypt/0.5.0/1.el7/x86_64/git-crypt-0.5.0-1.el7.x86_64.rpm
2: Installing rpm package :
[cloudbunny@monitoring ~]$ sudo rpm -ivh git-crypt-0.5.0–1.el7.x86_64.rpm

3: Check version :
[cloudbunny@monitoring ~]$ git-crypt version

Hurray !! We have successfully installed a git-crypt :)
Now it’s time for Setting up git-crypt
1: Clone your repository where you want to use git-crypt
[cloudbunny@monitoring ~]$ sudo git clone https://github.com/cloudbunny17/git-crypt-demo.git
In a cloned repository we have 2 files, out of which “ passwords” file is the 
one that contains our secret information.

“Cloned repository”
And “passwords” file contains some crucial information like database name, database password,etc..etc.. which is not encrypted.

“non-encrypted file”
2: Initialize your repository, generate a key, and prepare the existing Git repository for use with git-crypt.
[cloudbunny@monitoring git-crypt-demo]$ sudo git-crypt init

“Initializing git-crypt in the repository”
Note: Using git-crypt init command we will initialize git-crypt in the repository, but it will not encrypt any files by default. git-crypt identifies files that need to be encrypted using .gitattributes file. Therefore, you must first create the .gitattributes file before creating the file you wish to encrypt.
Info: .gitattributes can match wildcards and should be checked into the repository.
3: Check the status of the files
[cloudbunny@monitoring git-crypt-demo]$ sudo git-crypt status

4 : Create a .gitattributes file (for above scenario, we are encrypting passwords file) with following attributes “filter=git-crypt diff=git-crypt”
[cloudbunny@monitoring git-crypt-demo]$ sudo echo “passwords filter=git-crypt diff=git-crypt” > .gitattributes

“Contains that .gitattributes file holding”
Note : Do not forget to git add and git commit after add/move files or
after changing contents of files.
5 : Now again check the git-crypt status
[cloudbunny@monitoring git-crypt-demo]$ git-crypt status

and yes we have successfully encrypted our secret file. 😃
If you run into issues kindly see the last section of this blog where
common issues are mentioned.
Now It’s time for export-key to share with the authorized people.
cloudbunny@monitoring git-crypt-demo]$ sudo git-crypt export-key unlock-passwords
in these scenarios we have used the name as “unlock-passwords” as a key name, you can use desired key name <key-name>

“Contains of git-crypt key”
The creation of key named “unlock-passwords” has been completed and ready to be shared with authorized people! 😎
Few Keypoints you need to consider is :
Don’t forget to git ignore the file “unlock-passwords” to prevent accidentally committing this file to the git repo.
Confirm that you don’t accidentally encrypt the .gitattributes file itself (or other git files like .gitignore or .gitmodules)
Validate your .gitattributes rules are in place before you add sensitive files, or those files won’t be encrypted!
How to decrypt the encrypted files?

Our files in the repository are still encrypted even if you even try to clone your repository.
In this example, we have created with the name “unlock-passwords”
When you have obtained the access key go to your cloned encrypted directory and provide the decryption command.
[cloudbunny@monitoring git-crypt-demo]$ sudo git-crypt unlock unlock-passwords

Again to lock the file after you completed your work
[cloudbunny@monitoring git-crypt-demo]$ sudo git-crypt lock

If you try to look in your file again you can see the original encrypted version.
❗️You may run into issues like :
If a file is created, while git-crypt has a repo in a locked state, and even if the file is whitelisted in the .gitattributes to be encrypted, the file will not be encrypted when staging an "untracked" file in a git repo

Make sure that the repo is not in a “locked state” when adding a new file that conforms to the.gitattributes file for files that are encrypted with git-crypt to get around such a stated issue. So ensure the repo is in an unlocked state before adding a new file to the repo.
“git-crypt unlock” command can be used to unlock and Then stage the file to be committed. using git add and git commit.
Also , before pushing files to the repository it should be in a locked state,
it can be achieved using “git-crypt lock” command
Hope you have enjoyed this blog 😊
